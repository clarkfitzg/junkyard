
R version 3.0.3 (2014-03-06) -- "Warm Puppy"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(Matrix)
> 
> # 5a
> ############################################################
> X = matrix(c(rep(1, 5),
+              -0.63, 0.18, -0.84, 1.60, 0.33,
+              -0.82, 0.49, 0.74, 0.58, -0.31), ncol=3)
> Y = c(-0.97, 2.51, -0.19, 6.53, 1.00)
> X
     [,1]  [,2]  [,3]
[1,]    1 -0.63 -0.82
[2,]    1  0.18  0.49
[3,]    1 -0.84  0.74
[4,]    1  1.60  0.58
[5,]    1  0.33 -0.31
> Y
[1] -0.97  2.51 -0.19  6.53  1.00
> 
> # 5b
> ############################################################
> XtX = t(X) %*% X
> XtX
     [,1]   [,2]   [,3]
[1,] 5.00 0.6400 0.6800
[2,] 0.64 3.8038 0.8089
[3,] 0.68 0.8089 1.8926
> XtY = t(X) %*% Y
> XtY
        [,1]
[1,]  8.8800
[2,] 12.0005
[3,]  5.3621
> XtX_inverse = solve(XtX)
> XtX_inverse 
            [,1]        [,2]        [,3]
[1,]  0.21184719 -0.02140278 -0.06696786
[2,] -0.02140278  0.29134054 -0.11682948
[3,] -0.06696786 -0.11682948  0.60236791
> 
> # 5c
> ############################################################
> beta = XtX_inverse %*% t(X) %*% Y
> beta
         [,1]
[1,] 1.265271
[2,] 2.679724
[3,] 1.233270
> 
> # 5d
> ############################################################
> H = X %*% XtX_inverse %*% t(X)
> rankMatrix(H)[1]
[1] 3
> I = diag(5)
> rankMatrix(I - H)[1]
[1] 2
> 
> # 5e
> ############################################################
> Yhat = X %*% beta
> Yhat
            [,1]
[1,] -1.43423719
[2,]  2.35192330
[3,] -0.07307774
[4,]  6.26812586
[5,]  1.76726576
> residuals = Y - Yhat
> residuals
           [,1]
[1,]  0.4642372
[2,]  0.1580767
[3,] -0.1169223
[4,]  0.2618741
[5,] -0.7672658
> SSE = sum((Y - Yhat) ** 2)
> SSE
[1] 0.91145
> df_SSE = nrow(X) - ncol(X)
> MSE = SSE / (df_SSE)
> MSE
[1] 0.455725
> df_SSE
[1] 2
> 
> # 5f
> ############################################################
> # Variance / Covariance matrix s^2{beta}
> s2beta = MSE * XtX_inverse
> s2beta
             [,1]         [,2]        [,3]
[1,]  0.096544062 -0.009753782 -0.03051893
[2,] -0.009753782  0.132771173 -0.05324212
[3,] -0.030518931 -0.053242117  0.27451413
> # Standard errors for b0, b1, b2 are
> sqrt(diag(s2beta))
[1] 0.3107154 0.3643778 0.5239410
> # Estimated covariance between b1 and b2 is
> s2beta[2, 3]
[1] -0.05324212
> 
> # 5g
> ############################################################
> # Estimated variance for residual of first case:
> MSE * (I - H)[1, 1]
[1] 0.1145697
> 
> # 5h
> ############################################################
> # Model equations
> 
> 
> 
> # 5i
> ############################################################
> # Add interaction term between X1 and X2
> X = cbind(X, X[, 2] * X[, 3])
> X
     [,1]  [,2]  [,3]    [,4]
[1,]    1 -0.63 -0.82  0.5166
[2,]    1  0.18  0.49  0.0882
[3,]    1 -0.84  0.74 -0.6216
[4,]    1  1.60  0.58  0.9280
[5,]    1  0.33 -0.31 -0.1023
> # New hat matrix
> H = X %*% solve(t(X) %*% X) %*% t(X)
> rankMatrix(H)[1]
[1] 4
> rankMatrix(I - H)[1]
[1] 1
> # The ranks have changed to account for the additional column.
> 
> # 5j
> ############################################################
> beta = solve(t(X) %*% X) %*% t(X) %*% Y
> beta
         [,1]
[1,] 1.051738
[2,] 1.987286
[3,] 1.804233
[4,] 1.387774
> 
> # 5e
> ############################################################
> Yhat = X %*% beta
> Yhat
           [,1]
[1,] -0.9627998
[2,]  2.4159250
[3,] -0.1450905
[4,]  6.5657047
[5,]  1.0062607
> residuals = Y - Yhat
> residuals
             [,1]
[1,] -0.007200196
[2,]  0.094075045
[3,] -0.044909459
[4,] -0.035704724
[5,] -0.006260666
> SSE2 = sum((Y - Yhat) ** 2)
> SSE2
[1] 0.01223284
> df_SSE2 = nrow(X) - ncol(X)
> MSE = SSE2 / (df_SSE2)
> MSE
[1] 0.01223284
> df_SSE2
[1] 1
> 
> # 5l
> ############################################################
> # Which model fits the data better?
> # We calculate R^2
> SSTO = sum((Y - mean(Y)) ** 2)
> r2 = function(SSE) 1 - SSE / SSTO
> # First model
> r2(SSE)
[1] 0.9740676
> # Second model
> r2(SSE2)
[1] 0.999652
> # Adding terms to a fixed linear model generally increases the fit.
> # It doesn't matter if the terms are noise or not.
> 
> proc.time()
   user  system elapsed 
  3.109   0.145   3.268 
